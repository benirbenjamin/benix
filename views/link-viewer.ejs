<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= sharedLink.title %> - BenixSpace</title>
  <link rel="icon" href="/static/img/favicon.png" type="image/png" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  
  <!-- AdSense and Analytics -->
 <%- include('partials/auto-ads') %>
  <%- include('partials/adsense') %>
  <!-- YouTube iframe API -->
  <script src="https://www.youtube.com/iframe_api"></script>
  
  <style>
    body {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    .youtube-preview-container {
      cursor: pointer;
      position: relative;
      z-index: 1;
    }

    .youtube-placeholder {
      position: relative;
      z-index: 2;
    }

    .viewer-container {
      max-width: 900px;
      margin: 0 auto;
      padding: 20px;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .content-card {
      background: white;
      border-radius: 20px;
      overflow: hidden;
      box-shadow: 0 20px 40px rgba(0,0,0,0.1);
      transition: all 0.3s ease;
    }

    .content-header {
      background: linear-gradient(45deg, #667eea, #764ba2);
      color: white;
      padding: 30px;
      text-align: center;
      position: relative;
    }

    .timer-circle {
      width: 120px;
      height: 120px;
      border: 4px solid rgba(255,255,255,0.3);
      border-radius: 50%;
      margin: 0 auto 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
      background: rgba(255,255,255,0.1);
    }

    .timer-text {
      font-size: 2rem;
      font-weight: bold;
      color: white;
    }

    .progress-ring {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      transform: rotate(-90deg);
    }

    .progress-ring-circle {
      stroke: #fff;
      stroke-width: 4;
      fill: transparent;
      stroke-dasharray: 314.16; /* 2 * Ï€ * 50 */
      stroke-dashoffset: 314.16;
      transition: stroke-dashoffset 0.1s linear;
    }

    .content-body {
      padding: 40px;
      text-align: center;
    }

    .link-preview {
      background: #f8f9fa;
      border-radius: 15px;
      padding: 30px;
      margin: 20px 0;
      border: 1px solid #dee2e6;
    }

    .content-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 1.5rem;
      margin-top: 2rem;
    }

    .content-item {
      background: white;
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
      overflow: hidden;
      transition: transform 0.2s;
    }

    .content-item:hover {
      transform: translateY(-5px);
    }

    .content-item-image {
      width: 100%;
      height: 180px;
      object-fit: cover;
    }

    .content-item-body {
      padding: 1rem;
    }

    .content-item-title {
      font-size: 1.1rem;
      margin-bottom: 0.5rem;
      color: #2d3748;
      line-height: 1.4;
    }

    .content-item-text {
      font-size: 0.9rem;
      color: #4a5568;
      margin-bottom: 1rem;
      line-height: 1.5;
    }

    .section-title {
      color: #2d3748;
      font-size: 1.5rem;
      margin: 2rem 0 1rem;
      text-align: center;
      position: relative;
    }

    .section-title:after {
      content: '';
      display: block;
      width: 50px;
      height: 3px;
      background: linear-gradient(45deg, #667eea, #764ba2);
      margin: 0.5rem auto 0;
      border-radius: 2px;
    }

    .link-icon {
      font-size: 4rem;
      color: #667eea;
      margin-bottom: 20px;
    }

    .link-image-container {
      text-align: center;
      margin-bottom: 20px;
    }

    .link-image-container img {
      border-radius: 15px;
      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
      transition: transform 0.3s ease;
    }

    .link-image-container img:hover {
      transform: scale(1.02);
    }

    .youtube-preview {
      position: relative;
      border-radius: 15px;
      overflow: hidden;
      background: #000;
      margin: 20px 0;
      aspect-ratio: 16/9;
    }

    .youtube-preview iframe {
      width: 100%;
      height: 100%;
      border-radius: 10px;
    }

    .status-message {
      padding: 20px;
      border-radius: 10px;
      margin: 20px 0;
      font-weight: 500;
    }

    .status-waiting {
      background: linear-gradient(45deg, #ffeaa7, #fab1a0);
      color: #2d3436;
    }

    .status-ready {
      background: linear-gradient(45deg, #00b894, #00cec9);
      color: white;
    }

    .status-error {
      background: linear-gradient(45deg, #e17055, #d63031);
      color: white;
    }

    .watch-progress {
      margin-top: 15px;
    }

    .progress-label {
      text-align: center;
      color: rgba(255, 255, 255, 0.9);
      font-size: 0.9rem;
      margin-bottom: 8px;
    }

    .progress-bar-container {
      background: rgba(255, 255, 255, 0.2);
      border-radius: 10px;
      height: 8px;
      overflow: hidden;
      position: relative;
    }

    .progress-bar-fill {
      background: linear-gradient(90deg, #00b894, #00cec9);
      height: 100%;
      width: 0%;
      border-radius: 10px;
      transition: width 0.3s ease;
      position: relative;
    }

    .progress-bar-fill::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
      animation: shimmer 2s infinite;
    }

    @keyframes shimmer {
      0% { transform: translateX(-100%); }
      100% { transform: translateX(100%); }
    }

    .action-buttons {
      display: flex;
      gap: 15px;
      justify-content: center;
      margin-top: 30px;
      flex-wrap: wrap;
    }

    .btn-modern {
      padding: 15px 30px;
      border-radius: 50px;
      font-weight: 600;
      text-decoration: none;
      transition: all 0.3s ease;
      border: none;
      min-width: 200px;
      position: relative;
      overflow: hidden;
    }

    .btn-youtube {
      background: linear-gradient(45deg, #ff0000, #cc0000);
      color: white;
    }

    .btn-youtube:hover {
      background: linear-gradient(45deg, #cc0000, #990000);
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(255,0,0,0.3);
    }

    .btn-stay {
      background: linear-gradient(45deg, #667eea, #764ba2);
      color: white;
    }

    .btn-stay:hover {
      background: linear-gradient(45deg, #764ba2, #667eea);
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(102,126,234,0.3);
    }

    .btn-disabled {
      background: #95a5a6;
      color: #7f8c8d;
      cursor: not-allowed;
      opacity: 0.7;
    }

    .merchant-info {
      background: linear-gradient(45deg, #f8f9fa, #ffffff);
      border-radius: 15px;
      padding: 20px;
      margin: 20px 0;
      border: 1px solid #e9ecef;
    }

    .pulse-animation {
      animation: pulse 2s infinite;
    }

    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.05); }
      100% { transform: scale(1); }
    }

    .celebration {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: 9999;
    }

    /* Content Cards Styles */
    .content-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
      margin-top: 2rem;
    }

    .content-item {
      background: rgba(255, 255, 255, 0.9);
      border-radius: 15px;
      overflow: hidden;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .content-item:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    .content-item-image {
      width: 100%;
      height: 180px;
      object-fit: cover;
    }

    .content-item-body {
      padding: 1.25rem;
    }

    .content-item-title {
      font-size: 1.1rem;
      font-weight: 600;
      margin-bottom: 0.5rem;
      color: #2d3436;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .content-item-text {
      font-size: 0.9rem;
      color: #636e72;
      margin-bottom: 1rem;
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .section-title {
      color: #2d3436;
      font-size: 1.5rem;
      font-weight: 600;
      margin: 2rem 0 1rem;
      text-align: center;
      position: relative;
      padding-bottom: 0.5rem;
    }

    .section-title::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 50%;
      transform: translateX(-50%);
      width: 50px;
      height: 3px;
      background: linear-gradient(45deg, #667eea, #764ba2);
      border-radius: 3px;
    }

    /* Featured Posts Styles */
    .featured-posts {
      margin: 2rem 0;
    }

    .featured-post-card {
      border-radius: 15px;
      overflow: hidden;
      box-shadow: 0 4px 15px rgba(0,0,0,0.1);
      transition: transform 0.3s ease;
      background: #000;
    }

    .featured-post-card:hover {
      transform: translateY(-5px);
    }

    .featured-post-image {
      width: 100%;
      height: 100%;
      object-fit: cover;
      opacity: 0.7;
      transition: opacity 0.3s ease;
    }

    .featured-post-card:hover .featured-post-image {
      opacity: 0.5;
    }

    .featured-post-overlay {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      padding: 2rem;
      background: linear-gradient(to top, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0.4) 60%, transparent 100%);
      color: white;
    }

    .featured-post-content {
      position: relative;
      z-index: 2;
    }

    .featured-post-title {
      color: white;
      font-size: 1.5rem;
      font-weight: 600;
      margin-bottom: 1rem;
      line-height: 1.3;
    }

    .featured-post-excerpt {
      color: rgba(255,255,255,0.9);
      font-size: 1rem;
      margin-bottom: 1rem;
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      overflow: hidden;
      line-height: 1.5;
    }

    .badge {
      padding: 0.5em 1em;
      font-weight: 500;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      font-size: 0.75rem;
    }

    .post-meta {
      font-size: 0.85rem;
      color: #6c757d;
    }

    .pulse-animation {
      animation: pulse 1s infinite;
    }

    @keyframes pulse {
      0% {
        transform: scale(1);
        box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.7);
      }
      70% {
        transform: scale(1.05);
        box-shadow: 0 0 0 10px rgba(255, 255, 255, 0);
      }
      100% {
        transform: scale(1);
        box-shadow: 0 0 0 0 rgba(255, 255, 255, 0);
      }
    }

    .mobile-banner-header {
      text-align: center;
      margin-bottom: 15px;
    }

    .mobile-banner-header h6 {
      color: rgba(255, 255, 255, 0.9);
      font-weight: 600;
      margin: 0;
      font-size: 1rem;
    }

    .mobile-banner-inline {
      background: rgba(255, 255, 255, 0.1);
      border-radius: 15px;
      overflow: hidden;
      height: 140px;
      position: relative;
      transition: all 0.3s ease;
      border: 1px solid rgba(255, 255, 255, 0.2);
      backdrop-filter: blur(10px);
    }

    .mobile-banner-inline:hover {
      transform: scale(1.02);
      background: rgba(255, 255, 255, 0.15);
    }

    .mobile-banner-inline .banner-image {
      width: 100%;
      height: 100%;
      object-fit: cover;
      cursor: pointer;
      border-radius: 15px;
    }

    .mobile-banner-inline .advertise-placeholder {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100%;
      background: rgba(255, 255, 255, 0.1);
      border: 2px dashed rgba(255, 255, 255, 0.3);
      color: rgba(255, 255, 255, 0.8);
      text-decoration: none;
      transition: all 0.3s ease;
      padding: 20px;
      text-align: center;
      border-radius: 15px;
    }

    .mobile-banner-inline .advertise-placeholder:hover {
      background: rgba(255, 255, 255, 0.2);
      color: white;
      border-color: rgba(255, 255, 255, 0.5);
      text-decoration: none;
    }

    @media (min-width: 1201px) {
      .banner-container {
        display: block;
      }
      .mobile-banner-container {
        display: none;
      }
    }

    @media (max-width: 1200px) {
      .banner-container {
        display: none;
      }
      .mobile-banner-container {
        display: block;
      }
    }

    @media (max-width: 768px) {
      .viewer-container {
        padding: 10px;
      }
      
      .content-header, .content-body {
        padding: 20px;
      }
      
      .timer-circle {
        width: 100px;
        height: 100px;
      }
      
      .timer-text {
        font-size: 1.5rem;
      }
      
      .action-buttons {
        flex-direction: column;
        align-items: center;
      }

      /* Hide fixed positioned banners on mobile */
      .banner-container,
      .mobile-banner-container {
        display: none !important;
      }

      /* Show inline banner section on mobile */
      .mobile-banner-section {
        display: block;
      }
    }
  </style>
</head>

<body>
  <%- include('partials/navbar') %>
  <div class="viewer-container">
    <div class="content-card">
      <!-- Header with Timer -->
      <div class="content-header">
        <div class="timer-circle" id="timerCircle">
          <svg class="progress-ring" width="120" height="120">
            <circle class="progress-ring-circle" cx="60" cy="60" r="50"></circle>
          </svg>
          <div class="timer-text" id="timerText">30</div>
        </div>
        <h2><%= sharedLink.title %></h2>
        <p class="mb-0">Please wait <span id="countdown">30</span> seconds to continue...</p>
        
        <!-- Watch Progress Indicator -->
        <div class="watch-progress mt-3" id="watchProgress" style="display: none;">
          <div class="progress-label">
            <small>Video Watch Progress: <span id="watchTime">0</span>/30 seconds</small>
          </div>
          <div class="progress-bar-container">
            <div class="progress-bar-fill" id="watchProgressFill"></div>
          </div>
        </div>
      </div>

      <!-- Content Body -->
      <div class="content-body">
        <!-- Status Message -->
        <div class="status-message status-waiting" id="statusMessage">
          <i class="fas fa-hourglass-half me-2"></i>
          <span id="statusText"><i class="fab fa-youtube text-danger me-2"></i>Click the play button below to load and start watching</span>
        </div>

        <!-- Content Preview -->
        <% if (sharedLink.type === 'youtube' && sharedLink.url) { %>
          <% 
            let videoId = '';
            const youtubeUrl = sharedLink.url;
            const regex = /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/;
            const match = youtubeUrl.match(regex);
            if (match) {
              videoId = match[1];
            }
          %>
          <% if (videoId) { %>
            <div class="youtube-preview-container" id="youtube-container"
                 style="position: relative; width: 100%; height: 400px; background: #000; border-radius: 10px;">
              <div class="youtube-placeholder d-flex flex-column align-items-center justify-content-center h-100 text-white">
                <img src="https://img.youtube.com/vi/<%= videoId %>/maxresdefault.jpg"
                     alt="<%= sharedLink.title %>"
                     class="position-absolute w-100 h-100"
                     style="object-fit: cover; top: 0; left: 0; opacity: 0.7;">
                <button type="button" 
                        class="btn btn-link border-0 p-0 mb-3 position-relative youtube-play-btn" 
                        style="z-index: 2;"
                        onclick="if (typeof startYouTubeVideo === 'function') startYouTubeVideo(document.getElementById('youtube-container'), '<%= videoId %>')">
                  <i class="fab fa-youtube" style="font-size: 4rem; color: #ff0000; transition: transform 0.2s;"></i>
                </button>
                <h5 class="text-center px-3 position-relative" style="z-index: 2;"><%= sharedLink.title %></h5>
                <p class="text-center text-muted px-2 mb-0 position-relative" style="font-size: 14px; z-index: 2;">Click to load and watch</p>
              </div>
            </div>
          <% } %>
        <% } else { %>
          <div class="link-preview">
            <!-- Display link image if available -->
            <% if (sharedLink.image_url) { %>
              <div class="link-image-container mb-3">
                <% 
                  // Ensure the image URL is properly formatted
                  let imageUrl = sharedLink.image_url;
                  if (imageUrl && !imageUrl.startsWith('http') && !imageUrl.startsWith('/')) {
                    imageUrl = '/' + imageUrl;
                  }
                %>
                <img src="<%= imageUrl %>" 
                     alt="<%= sharedLink.title %>" 
                     class="img-fluid rounded"
                     style="max-height: 300px; width: 100%; object-fit: cover;"
                     onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                <div class="link-icon" style="display: none;">
                  <i class="<%= 
                    sharedLink.type === 'product' ? 'fas fa-shopping-bag' : 
                    'fas fa-external-link-alt' %>"></i>
                </div>
              </div>
            <% } else { %>
              <div class="link-icon">
                <i class="<%= 
                  sharedLink.type === 'product' ? 'fas fa-shopping-bag' : 
                  'fas fa-external-link-alt' %>"></i>
              </div>
            <% } %>
            <h4><%= sharedLink.title %></h4>
            <% if (sharedLink.description) { %>
              <p class="text-muted"><%= sharedLink.description %></p>
            <% } %>
          </div>
        <% } %>

        <!-- Merchant Info -->
        <div class="merchant-info">
          <h6><i class="fas fa-store me-2"></i>Shared by</h6>
          <p class="mb-0"><strong><%= sharedLink.merchant_name || 'BenixSpace Merchant' %></strong></p>
        </div>

        <!-- Action Buttons -->
        <div class="action-buttons" id="actionButtons" style="display: none;">
          <% if (sharedLink.type === 'youtube') { %>
            <a href="<%= sharedLink.url %>" target="_blank" class="btn-modern btn-youtube" id="youtubeBtn">
              <i class="fab fa-youtube me-2"></i>Watch on YouTube
            </a>
          <% } else { %>
            <a href="<%= sharedLink.url %>" target="_blank" class="btn-modern btn-youtube" id="externalBtn">
              <i class="fas fa-external-link-alt me-2"></i>Visit Link
            </a>
          <% } %>
          <button class="btn-modern btn-stay" id="stayBtn">
            <i class="fas fa-home me-2"></i>Stay on BenixSpace
          </button>
        </div>

        <!-- Loading Buttons (disabled) -->
        <div class="action-buttons" id="loadingButtons">
          <button class="btn-modern btn-disabled" disabled>
            <i class="fas fa-spinner fa-spin me-2"></i>Please wait...
          </button>
        </div>

        <!-- Mobile Banner Section (shown only on mobile) -->
        <div class="mobile-banner-section" id="mobileBannerSection">
          <div class="mobile-banner-header">
            <h6><i class="fas fa-bullhorn me-2"></i>Sponsored Content</h6>
          </div>
          <div class="mobile-banner-inline" id="mobileBannerInline">
            <!-- Mobile banner will be loaded here -->
          </div>
        </div>

        <!-- Related Links Section -->
        <% if (typeof relatedLinks !== 'undefined' && relatedLinks && relatedLinks.length > 0) { %>
          <div class="content-section mt-5">
            <h3 class="section-title">Related Links You Might Like</h3>
            <div class="content-grid">
              <% relatedLinks.forEach(link => { %>
                <div class="content-item">
                  <% if (link.image_url) { %>
                    <img src="<%= link.image_url %>" class="content-item-image" alt="<%= link.title %>">
                  <% } else { %>
                    <div class="content-item-image d-flex align-items-center justify-content-center bg-light">
                      <i class="<%= link.type === 'product' ? 'fas fa-shopping-bag' : 'fas fa-link' %> fa-2x text-muted"></i>
                    </div>
                  <% } %>
                  <div class="content-item-body">
                    <h4 class="content-item-title"><%= link.title %></h4>
                    <% if (link.description) { %>
                      <p class="content-item-text">
                        <%= link.description.length > 100 ? link.description.substring(0, 100) + '...' : link.description %>
                      </p>
                    <% } %>
                    <div class="d-flex justify-content-between align-items-center">
                      <small class="text-muted">
                        <i class="fas fa-user me-1"></i><%= link.merchant_name %>
                      </small>
                      <a href="/links/<%= link.id %>/share" class="btn btn-outline-primary btn-sm">
                        <i class="fas fa-eye me-1"></i>View Link
                      </a>
                    </div>
                  </div>
                </div>
              <% }); %>
            </div>
          </div>
        <% } %>

        <% if (typeof randomProducts !== 'undefined' && randomProducts && randomProducts.length > 0) { %>
          <div class="content-section mt-5">
            <h3 class="section-title">Featured Products</h3>
            <div class="content-grid">
              <% randomProducts.forEach(product => { %>
                <div class="content-item">
                  <% if (product.image_url) { %>
                    <img src="<%= product.image_url %>" class="content-item-image" alt="<%= product.name %>">
                  <% } else { %>
                    <div class="content-item-image d-flex align-items-center justify-content-center bg-light">
                      <i class="fas fa-shopping-bag fa-2x text-muted"></i>
                    </div>
                  <% } %>
                  <div class="content-item-body">
                    <h4 class="content-item-title"><%= product.name %></h4>
                    <% if (product.description) { %>
                      <p class="content-item-text">
                        <%= product.description.length > 80 ? product.description.substring(0, 80) + '...' : product.description %>
                      </p>
                    <% } %>
                    <div class="d-flex justify-content-between align-items-center">
                      <div>
                        <span class="h5 text-success mb-0">$<%= parseFloat(product.price).toFixed(2) %></span>
                        <small class="text-muted d-block"><%= product.merchant_name %></small>
                      </div>
                      <a href="/products/<%= product.id %>" class="btn btn-success btn-sm">
                        <i class="fas fa-shopping-cart me-1"></i>Buy Now
                      </a>
                    </div>
                  </div>
                </div>
              <% }); %>
            </div>
          </div>
        <% } %>

        <% if (typeof blogPosts !== 'undefined' && blogPosts && blogPosts.length > 0) { %>
          <!-- Featured Blog Posts -->
          <div class="content-section mt-5">
            <h3 class="section-title">Featured Articles</h3>
            <div class="featured-posts mb-4">
              <% const featuredPosts = blogPosts.slice(0, 3); %>
              <div class="row g-4">
                <% featuredPosts.forEach((post, index) => { %>
                  <div class="col-md-<%= index === 0 ? '8' : '4' %>">
                    <div class="featured-post-card h-100 position-relative">
                      <% if (post.featured_image) { %>
                        <img src="<%= post.featured_image %>" class="featured-post-image" alt="<%= post.title %>">
                      <% } else { %>
                        <div class="featured-post-image d-flex align-items-center justify-content-center bg-light">
                          <i class="fas fa-blog fa-3x text-muted"></i>
                        </div>
                      <% } %>
                      <div class="featured-post-overlay">
                        <div class="featured-post-content">
                          <h4 class="featured-post-title"><%= post.title %></h4>
                          <% if (post.excerpt && index === 0) { %>
                            <p class="featured-post-excerpt">
                              <%= post.excerpt.length > 150 ? post.excerpt.substring(0, 150) + '...' : post.excerpt %>
                            </p>
                          <% } %>
                          <div class="d-flex justify-content-between align-items-center">
                            <div class="d-flex align-items-center">
                              <small class="text-light me-3">
                                <i class="fas fa-eye me-1"></i><%= post.view_count %> views
                              </small>
                              <small class="text-light">
                                By <%= post.business_name || post.username %>
                              </small>
                            </div>
                          </div>
                          <a href="/blog/<%= post.slug %>" class="stretched-link"></a>
                        </div>
                      </div>
                    </div>
                  </div>
                <% }); %>
              </div>
            </div>

            <!-- Recent Blog Posts -->
            <h3 class="section-title mt-5">Latest Articles</h3>
            <div class="content-grid">
              <% const recentPosts = blogPosts.slice(3); %>
              <% recentPosts.forEach(post => { %>
                <div class="content-item">
                  <% if (post.featured_image) { %>
                    <img src="<%= post.featured_image %>" class="content-item-image" alt="<%= post.title %>">
                  <% } else { %>
                    <div class="content-item-image d-flex align-items-center justify-content-center bg-light">
                      <i class="fas fa-blog fa-2x text-muted"></i>
                    </div>
                  <% } %>
                  <div class="content-item-body">
                    <h4 class="content-item-title"><%= post.title %></h4>
                    <% if (post.excerpt) { %>
                      <p class="content-item-text">
                        <%= post.excerpt.length > 120 ? post.excerpt.substring(0, 120) + '...' : post.excerpt %>
                      </p>
                    <% } %>
                    <div class="post-meta d-flex justify-content-between align-items-center mb-3">
                      <div class="d-flex align-items-center">
                        <small class="text-muted me-3">
                          <i class="fas fa-eye me-1"></i><%= post.view_count %> views
                        </small>
                        <small class="text-muted">
                          <i class="fas fa-user me-1"></i><%= post.business_name || post.username %>
                        </small>
                      </div>
                      <small class="text-muted">
                        <i class="fas fa-clock me-1"></i><%= new Date(post.created_at).toLocaleDateString() %>
                      </small>
                    </div>
                    <a href="/blog/<%= post.slug %>" class="btn btn-outline-primary btn-sm w-100">
                      <i class="fas fa-book-open me-1"></i>Read More
                    </a>
                  </div>
                </div>
              <% }); %>
            </div>
          </div>
        <% } %>

        <!-- Call to Action Section -->
        <div class="cta-section mt-5">
          <div class="text-center p-5 bg-gradient rounded-lg shadow-lg">
            <div class="mb-4">
              <i class="fas fa-star fa-2x text-warning pulse-animation"></i>
            </div>
            <h3 class="mb-3 text-dark">Join BenixSpace Community</h3>
            <p class="text-muted mb-4">
              Discover thousands of quality links, products, and content. Share and earn by promoting content from verified merchants.
            </p>
            <div class="d-flex flex-wrap justify-content-center gap-3">
              <a href="/" class="btn btn-primary btn-lg">
                <i class="fas fa-home me-2"></i>Browse Homepage
              </a>
              <a href="/blog" class="btn btn-outline-primary btn-lg">
                <i class="fas fa-blog me-2"></i>Read Blog
              </a>
              <a href="/register" class="btn btn-success btn-lg">
                <i class="fas fa-user-plus me-2"></i>Join Now
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Celebration Effect -->
  <div class="celebration" id="celebration"></div>



  <!-- Load YouTube API and initialize functions -->
  <script src="https://www.youtube.com/iframe_api"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Global variables
    // Variables are already declared in the outer scope - skip redeclaration
    timeLeft = 30;
    hasClickBeenCounted = false;
    timerInterval = null;
    youtubePlayer = null;
    isVideoPlaying = false;
    timerStarted = false;
    playerReady = false;
    totalVideoWatchTime = 0;

    // Timer and status functions
    function startTimer() {
      if (!timerInterval && isVideoPlaying && timeLeft > 0) {
        console.log('Starting timer - video is playing');
        timerStarted = true;
        timerInterval = setInterval(() => {
          if (!isVideoPlaying) {
            console.log('Pausing timer - video not playing');
            pauseTimer();
            return;
          }
          updateTimer();
        }, 1000);
      }
    }

    function pauseTimer() {
      if (timerInterval) {
        console.log('Pausing timer');
        clearInterval(timerInterval);
        timerInterval = null;
      }
      // Make sure we update the status when paused
      if (!isVideoPlaying) {
        updateStatusForPaused();
      }
    }

    function updateTimer() {
      // Double check that video is still playing
      if (!isVideoPlaying || !youtubePlayer || youtubePlayer.getPlayerState() !== YT.PlayerState.PLAYING) {
        console.log('Timer tick skipped - video not in playing state');
        pauseTimer();
        return;
      }

      const timerText = document.getElementById('timerText');
      const countdown = document.getElementById('countdown');
      const progressRing = document.querySelector('.progress-ring-circle');
      
      if (timerText) timerText.textContent = timeLeft;
      if (countdown) countdown.textContent = timeLeft;
      
      totalVideoWatchTime++;
      
      // Update watch progress
      const watchTimeDisplay = document.getElementById('watchTime');
      const watchProgressFill = document.getElementById('watchProgressFill');
      if (watchTimeDisplay && watchProgressFill) {
        watchTimeDisplay.textContent = totalVideoWatchTime;
        const progressPercent = (totalVideoWatchTime / 30) * 100;
        watchProgressFill.style.width = Math.min(progressPercent, 100) + '%';
      }
      
      // Update progress ring if it exists
      if (progressRing) {
        const radius = 50;
        const circumference = 2 * Math.PI * radius;
        const progress = (30 - timeLeft) / 30;
        const offset = circumference - (progress * circumference);
        progressRing.style.strokeDashoffset = offset;
      }
      
      if (timeLeft <= 0) {
        clearInterval(timerInterval);
        completeTimer();
        return;
      }
      
      // Update status based on time remaining
      if (timeLeft > 20) {
        updateStatusForPlaying();
      } else if (timeLeft > 10) {
        updateStatus('<i class="fas fa-clock me-2"></i>Almost ready... Keep watching!');
      } else {
        updateStatus('<i class="fas fa-hourglass-half me-2"></i>Just a few more seconds...');
      }
      
      timeLeft--;
    }

    function updateStatus(message) {
      const statusText = document.getElementById('statusText');
      if (statusText) {
        statusText.innerHTML = message;
      }
    }

    function updateStatusForPlaying() {
      updateStatus('<i class="fas fa-play me-2"></i>Video is playing - timer counting down...');
      const watchProgress = document.getElementById('watchProgress');
      if (watchProgress) {
        watchProgress.style.display = 'block';
      }
    }

    function updateStatusForPaused() {
      if (timeLeft > 0) {
        updateStatus(`<i class="fas fa-pause me-2"></i>Video paused - timer paused. You've watched ${totalVideoWatchTime}/30 seconds. Click play to continue.`);
      }
    }

    function updateStatusForBuffering() {
      if (timeLeft > 0) {
        updateStatus('<i class="fas fa-spinner fa-spin me-2"></i>Video is buffering - timer paused...');
      }
    }

    function completeTimer() {
      if (!hasClickBeenCounted) {
        countClick();
      }
      
      const timerText = document.getElementById('timerText');
      const countdown = document.getElementById('countdown');
      const statusMessage = document.getElementById('statusMessage');
      const loadingButtons = document.getElementById('loadingButtons');
      const actionButtons = document.getElementById('actionButtons');
      
      if (timerText) timerText.textContent = 'âœ“';
      if (countdown) countdown.textContent = '0';
      
      if (statusMessage) {
        statusMessage.className = 'status-message status-ready';
      }
      
      updateStatus('<i class="fas fa-check-circle me-2"></i>Excellent! You watched the video for 30 seconds. Choose your next action:');
      
      if (loadingButtons) loadingButtons.style.display = 'none';
      if (actionButtons) actionButtons.style.display = 'flex';
      
      showCelebration();
    }

    function countClick() {
      if (hasClickBeenCounted) return;
      
      hasClickBeenCounted = true;
      
      // Send click count to server
      fetch('/api/count-click/<%= sharedLink.share_code %>', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          timestamp: new Date().toISOString(),
          userAgent: navigator.userAgent,
          referrer: document.referrer
        })
      }).then(response => {
        if (response.ok) {
          console.log('Click counted successfully');
        }
      }).catch(error => {
        console.error('Error counting click:', error);
      });
    }

    function showCelebration() {
      const celebration = document.getElementById('celebration');
      if (!celebration) return;

      const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#f9ca24', '#f0932b', '#eb4d4b', '#6c5ce7'];
      
      for (let i = 0; i < 50; i++) {
        setTimeout(() => {
          const confetti = document.createElement('div');
          confetti.style.position = 'absolute';
          confetti.style.width = '10px';
          confetti.style.height = '10px';
          confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
          confetti.style.left = Math.random() * 100 + '%';
          confetti.style.top = '-10px';
          confetti.style.borderRadius = '50%';
          confetti.style.animation = `fall ${Math.random() * 3 + 2}s linear forwards`;
          
          celebration.appendChild(confetti);
          
          setTimeout(() => {
            confetti.remove();
          }, 5000);
        }, i * 100);
      }
    }

    // Function to start YouTube video
    function startYouTubeVideo(container, videoId) {
      console.log('Starting video playback for:', videoId);
      
      // Create player container
      const playerDiv = document.createElement('div');
      playerDiv.id = 'youtubePlayer';
      playerDiv.style.width = '100%';
      playerDiv.style.height = '400px';
      playerDiv.style.borderRadius = '10px';
      
      // Replace thumbnail with player
      container.innerHTML = '';
      container.appendChild(playerDiv);
      
      // Initialize YouTube player
      youtubePlayer = new YT.Player('youtubePlayer', {
        videoId: videoId,
        width: '100%',
        height: '400',
        playerVars: {
          autoplay: 1,
          rel: 0,
          showinfo: 0,
          controls: 1,
          modestbranding: 1
        },
        events: {
          'onReady': function(event) {
            console.log('Player ready');
            event.target.playVideo();
            playerReady = true;
            isVideoPlaying = true;
            updateStatusForPlaying();
            startTimer();
          },
          'onStateChange': onPlayerStateChange,
          'onError': onPlayerError
        }
      });
    }

    // Player event handlers
    function onPlayerStateChange(event) {
      console.log('Player state changed:', event.data);
      
      switch (event.data) {
        case YT.PlayerState.PLAYING:
          console.log('Video started playing');
          isVideoPlaying = true;
          startTimer();
          updateStatusForPlaying();
          break;
          
        case YT.PlayerState.PAUSED:
          console.log('Video paused');
          isVideoPlaying = false;
          pauseTimer();
          updateStatusForPaused();
          break;
          
        case YT.PlayerState.ENDED:
          console.log('Video ended');
          isVideoPlaying = false;
          pauseTimer();
          updateStatusForEnded();
          break;
          
        case YT.PlayerState.BUFFERING:
          console.log('Video buffering');
          isVideoPlaying = false;
          pauseTimer();
          updateStatusForBuffering();
          break;
      }
    }

    function onPlayerError(event) {
      console.error('YouTube player error:', event.data);
      showPlayerError();
    }

    function showPlayerError(message = 'Video player error') {
      const statusText = document.getElementById('statusText');
      const statusMessage = document.getElementById('statusMessage');
      if (statusText && statusMessage) {
        statusText.innerHTML = `<i class="fas fa-exclamation-triangle me-2"></i>${message}. <a href="javascript:location.reload()" class="text-danger">Click here to refresh</a>`;
        statusMessage.className = 'status-message status-error';
      }
    }
  </script>
  <style>
    .youtube-play-button {
      width: 68px;
      height: 48px;
      background: none;
      border: none;
      padding: 0;
      margin: 0;
      cursor: pointer;
      z-index: 3;
      transition: transform 0.3s ease;
    }
    .youtube-play-button:hover {
      transform: scale(1.1);
    }
    .youtube-play-overlay {
      background-color: rgba(0, 0, 0, 0.1);
      cursor: pointer;
      z-index: 2;
      transition: background-color 0.3s ease;
    }
    .youtube-thumbnail {
      position: relative;
      cursor: pointer;
      background-color: #000;
      border-radius: 10px;
      overflow: hidden;
      width: 100%;
      height: 400px;
    }
    .youtube-thumbnail img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      opacity: 0.9;
      transition: opacity 0.3s ease;
    }
    .youtube-thumbnail:hover .youtube-play-overlay {
      background-color: rgba(0, 0, 0, 0.3);
    }
    .youtube-thumbnail:hover img {
      opacity: 0.8;
    }
    #youtubePlayer {
      width: 100%;
      height: 400px;
      border-radius: 10px;
    }
  </style>
  <script>
    // Global variables
    // Initialize only if not already defined
    if (typeof timeLeft === 'undefined') timeLeft = 30;
    if (typeof hasClickBeenCounted === 'undefined') hasClickBeenCounted = false;
    if (typeof timerInterval === 'undefined') timerInterval = null;
    if (typeof youtubePlayer === 'undefined') youtubePlayer = null;
    if (typeof isVideoPlaying === 'undefined') isVideoPlaying = false;
    if (typeof timerStarted === 'undefined') timerStarted = false;
    if (typeof playerReady === 'undefined') playerReady = false;
    if (typeof totalVideoWatchTime === 'undefined') totalVideoWatchTime = 0; // Track actual watch time

    // Function to start video playback
    window.startYouTubeVideo = function(videoContainer, videoId) {
      console.log('Starting video playback for:', videoId);
      
      // Create player container
      const playerDiv = document.createElement('div');
      playerDiv.id = 'youtubePlayer';
      
      // Replace thumbnail with player
      videoContainer.innerHTML = '';
      videoContainer.appendChild(playerDiv);
      
      // Initialize YouTube player
      youtubePlayer = new YT.Player('youtubePlayer', {
        videoId: videoId,
        width: '100%',
        height: '400',
        playerVars: {
          autoplay: 1,
          rel: 0,
          showinfo: 0,
          controls: 1,
          modestbranding: 1
        },
        events: {
          'onReady': function(event) {
            console.log('Player ready');
            event.target.playVideo();
            playerReady = true;
            isVideoPlaying = true;
            updateStatusForPlaying();
            startTimer();
          },
          'onStateChange': onPlayerStateChange,
          'onError': onPlayerError
        }
      });
    };

    function loadYouTubeVideo(container, videoId, title) {
      console.log('Setting up video thumbnail for:', videoId);
      
      // Create the YouTube-style thumbnail with play button
      const thumbnailHtml = `
        <div class="youtube-thumbnail" style="width: 100%; height: 400px;" data-video-id="${videoId}">
          <img src="https://img.youtube.com/vi/${videoId}/maxresdefault.jpg" 
               alt="${title}" 
               style="width: 100%; height: 100%;">
          <div class="position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center youtube-play-overlay">
            <button class="youtube-play-button" type="button" aria-label="Play video" onclick="startYouTubeVideo(this.closest('.youtube-thumbnail').parentElement, '${videoId}')">
              <svg height="100%" version="1.1" viewBox="0 0 68 48" width="100%">
                <path class="ytp-large-play-button-bg" d="M66.52,7.74c-0.78-2.93-2.49-5.41-5.42-6.19C55.79,.13,34,0,34,0S12.21,.13,6.9,1.55 C3.97,2.33,2.27,4.81,1.48,7.74C0.06,13.05,0,24,0,24s0.06,10.95,1.48,16.26c0.78,2.93,2.49,5.41,5.42,6.19 C12.21,47.87,34,48,34,48s21.79-0.13,27.1-1.55c2.93-0.78,4.64-3.26,5.42-6.19C67.94,34.95,68,24,68,24S67.94,13.05,66.52,7.74z" fill="#f00"></path>
                <path d="M 45,24 27,14 27,34" fill="#fff"></path>
              </svg>
            </button>
          </div>
        </div>
      `;
      
      container.innerHTML = thumbnailHtml;
      
      // Add click handler to the thumbnail as well
      const thumbnail = container.querySelector('.youtube-thumbnail');
      thumbnail.onclick = function(e) {
        if (e.target.closest('.youtube-play-button')) {
          return; // Let the button handle its own click
        }
        startYouTubeVideo(container, videoId);
      };
      
      console.log('Thumbnail HTML and handlers set up');

      // Add click event handlers
      function startVideo() {
        console.log('Start video called');
        
        // Create the player container
        const playerDiv = document.createElement('div');
        playerDiv.id = 'youtubePlayer';
        
        // Clear the container and add the player div
        container.innerHTML = '';
        container.appendChild(playerDiv);
        
        console.log('Creating YouTube player...');
        
        // Initialize YouTube player
        youtubePlayer = new YT.Player('youtubePlayer', {
          videoId: videoId,
          width: '100%',
          height: '400',
          playerVars: {
            autoplay: 1,
            rel: 0,
            showinfo: 0,
            controls: 1,
            enablejsapi: 1,
            modestbranding: 1
          },
          events: {
            'onReady': function(event) {
              console.log('YouTube player ready');
              event.target.playVideo();
              playerReady = true;
              isVideoPlaying = true;
              updateStatusForPlaying();
              startTimer();
            },
            'onStateChange': onPlayerStateChange,
            'onError': onPlayerError
          }
        });
      }

      // Setup click handlers after small delay to ensure DOM is ready
      setTimeout(() => {
        const thumbnail = container.querySelector('.youtube-thumbnail');
        const playButton = container.querySelector('.youtube-play-button');
        
        if (thumbnail && playButton) {
          console.log('Setting up click handlers');
          
          thumbnail.onclick = (e) => {
            console.log('Thumbnail clicked');
            e.preventDefault();
            startVideo();
          };
          
          playButton.onclick = (e) => {
            console.log('Play button clicked');
            e.preventDefault();
            e.stopPropagation();
            startVideo();
          };
        } else {
          console.error('Could not find thumbnail or play button elements');
        }
      }, 100);
    }
    
    const timerText = document.getElementById('timerText');
    const countdown = document.getElementById('countdown');
    const statusMessage = document.getElementById('statusMessage');
    const statusText = document.getElementById('statusText');
    const actionButtons = document.getElementById('actionButtons');
    const loadingButtons = document.getElementById('loadingButtons');
    const progressRing = document.querySelector('.progress-ring-circle');
    const timerCircle = document.getElementById('timerCircle');
    
    // Calculate progress ring circumference
    const radius = 50;
    const circumference = 2 * Math.PI * radius;
    
    // Initialize progress ring
    progressRing.style.strokeDasharray = circumference;
    progressRing.style.strokeDashoffset = circumference;

    // Initialize click handler immediately and on DOMContentLoaded
    function initializeClickHandler() {
      console.log('Initializing click handler...');
      const youtubeContainer = document.querySelector('.youtube-preview-container');
      if (youtubeContainer) {
        console.log('Found container, adding click listener');
        youtubeContainer.addEventListener('click', function() {
          console.log('Container clicked');
          const videoId = this.dataset.videoId;
          const videoTitle = this.dataset.videoTitle;
          console.log('Video ID:', videoId, 'Title:', videoTitle);
          if (videoId) {
            loadYouTubeVideo(this, videoId, videoTitle);
          }
        });
      } else {
        console.log('Container not found');
      }
    }

    // Try to initialize immediately
    initializeClickHandler();

    // Also initialize on DOMContentLoaded
    document.addEventListener('DOMContentLoaded', initializeClickHandler);

    // YouTube iframe API ready callback
function onYouTubeIframeAPIReady() {
  console.log('YouTube API is ready');
  youtubeApiReady = true;
}

// Function to load YouTube video using lazy loading pattern
function loadYouTubeVideo(container, videoId, title) {
      debugLog('Setting up video thumbnail for ' + videoId);
      
      // Create the thumbnail container with YouTube-style play button
      container.innerHTML = `
          <div class="youtube-thumbnail position-relative" style="width: 100%; height: 400px; cursor: pointer;" data-video-id="${videoId}">
              <img src="https://img.youtube.com/vi/${videoId}/maxresdefault.jpg" 
                   alt="${title}" 
                   style="width: 100%; height: 100%; object-fit: cover; border-radius: 10px;">
              <div class="position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center">
                  <div class="youtube-play-button">
                      <svg height="100%" version="1.1" viewBox="0 0 68 48" width="100%">
                          <path class="ytp-large-play-button-bg" d="M66.52,7.74c-0.78-2.93-2.49-5.41-5.42-6.19C55.79,.13,34,0,34,0S12.21,.13,6.9,1.55 C3.97,2.33,2.27,4.81,1.48,7.74C0.06,13.05,0,24,0,24s0.06,10.95,1.48,16.26c0.78,2.93,2.49,5.41,5.42,6.19 C12.21,47.87,34,48,34,48s21.79-0.13,27.1-1.55c2.93-0.78,4.64-3.26,5.42-6.19C67.94,34.95,68,24,68,24S67.94,13.05,66.52,7.74z" fill="#f00"></path>
                          <path d="M 45,24 27,14 27,34" fill="#fff"></path>
                      </svg>
                  </div>
              </div>
          </div>
      `;

      // Add click event to load and play video
      const thumbnailContainer = container.querySelector('.youtube-thumbnail');
      thumbnailContainer.addEventListener('click', function() {
          debugLog('Thumbnail clicked, loading actual video...');
          
          // Replace thumbnail with loading indicator
          this.innerHTML = `
              <div class="d-flex flex-column align-items-center justify-content-center h-100 bg-dark" style="border-radius: 10px;">
                  <div class="spinner-border text-danger" role="status" style="width: 3rem; height: 3rem;">
                      <span class="visually-hidden">Loading video...</span>
                  </div>
                  <p class="text-white mt-3">Loading video...</p>
              </div>
          `;

          try {
              // Create container div for custom layout
              const playerContainer = document.createElement('div');
              playerContainer.className = 'position-relative';
              
              // Show loading state initially
              playerContainer.innerHTML = `
                  <div class="d-flex flex-column align-items-center justify-content-center h-100 bg-dark" style="border-radius: 10px; height: 400px;">
                      <div class="spinner-border text-danger" role="status" style="width: 3rem; height: 3rem;">
                          <span class="visually-hidden">Loading video player...</span>
                      </div>
                      <p class="text-white mt-3">Loading video...</p>
                  </div>
              `;          // Create hidden iframe
          const iframe = document.createElement('iframe');
          iframe.id = 'youtubePlayer';
          iframe.width = '100%';
          iframe.height = '400';
          iframe.style.display = 'none'; // Hide initially
          iframe.style.borderRadius = '10px';
          iframe.title = title;
          iframe.frameBorder = '0';
          iframe.allow = 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share';
          iframe.allowFullscreen = true;
          
          // Clear container and add new layout
          container.innerHTML = '';
          container.appendChild(playerContainer);
          container.appendChild(iframe);

          debugLog('Initializing YouTube player...');
          // Initialize player with autoplay disabled initially
          youtubePlayer = new YT.Player('youtubePlayer', {
              videoId: videoId,
              playerVars: {
                  autoplay: 0, // Disabled initially
                  controls: 1,
                  rel: 0,
                  showinfo: 0,
                  mute: 0
              },
              events: {
                  'onReady': (event) => {
                      debugLog('Player ready - checking video availability');
                      // Check if video is available
                      event.target.getVideoData();
                      // Create and show thumbnail once we know video is available
                      const thumbnailContainer = document.createElement('div');
                      thumbnailContainer.className = 'video-thumbnail position-relative';
                      thumbnailContainer.style.width = '100%';
                      thumbnailContainer.style.height = '400px';
                      thumbnailContainer.innerHTML = `
                          <img src="https://img.youtube.com/vi/${videoId}/maxresdefault.jpg" 
                               alt="${title}" 
                               style="width: 100%; height: 100%; object-fit: cover; border-radius: 10px;">
                          <div class="position-absolute top-50 start-50 translate-middle">
                              <button class="btn btn-danger btn-lg rounded-circle" style="width: 80px; height: 80px;">
                                  <i class="fas fa-play fa-2x"></i>
                              </button>
                          </div>
                      `;
                      // Update status and show thumbnail
                      updateStatusForReady();
                      playerContainer.innerHTML = '';
                      playerContainer.appendChild(thumbnailContainer);
                      
                      // Add click handler to play button
                      thumbnailContainer.addEventListener('click', () => {
                          // Hide thumbnail and show player
                          thumbnailContainer.style.display = 'none';
                          iframe.style.display = 'block';
                          // Start playing
                          event.target.playVideo();
                      });
                  },
                  'onStateChange': onPlayerStateChange,
                  'onError': onPlayerError
              }
          });
          debugLog('Player initialization started');
      } catch (error) {
          console.error('Error loading video:', error);
          showPlayerError();
      }

}

// Player ready callback is now handled in the loadYouTubeVideo function
// This is kept for backwards compatibility
(function() {
    // Status update functions
    window.updateStatusForLoading = function() {
        statusText.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Loading video player... Please wait';
        document.getElementById('watchProgress').style.display = 'none';
        statusMessage.className = 'status-message status-loading';
    };

    // Player functions
    window.onPlayerReady = function(event) {
      console.log('YouTube player is ready');
      playerReady = true;
      // Update status to show player is ready
      updateStatusForReady();
    };

    window.onPlayerError = function(event) {
        console.error('YouTube player error:', event.data);
        showPlayerError();
    };

    window.showPlayerError = function(message = 'Video player error') {
        debugLog('Player error: ' + message);
        statusText.innerHTML = `<i class="fas fa-exclamation-triangle me-2"></i>${message}. <a href="javascript:location.reload()" class="text-danger">Click here to refresh</a>`;
        statusMessage.className = 'status-message status-error';
    };

    window.onPlayerStateChange = function(event) {
      console.log('Player state changed:', event.data);
      
      if (event.data === YT.PlayerState.PLAYING) {
        isVideoPlaying = true;
        startTimer();
        updateStatusForPlaying();
      } else {
        // ANY other state (paused, buffering, ended, etc.) should pause timer
        isVideoPlaying = false;
        pauseTimer();
        
        if (event.data === YT.PlayerState.PAUSED) {
          updateStatusForPaused();
        } else if (event.data === YT.PlayerState.BUFFERING) {
          updateStatusForBuffering();
        } else if (event.data === YT.PlayerState.ENDED) {
          updateStatusForEnded();
        } else if (event.data === YT.PlayerState.CUED) {
          updateStatusForCued();
        }
      }
    }

    window.startTimer = function() {
      // Only start if video is actually playing
      if (isVideoPlaying && timeLeft > 0) {
        if (!timerInterval) {
          timerStarted = true;
          timerInterval = setInterval(() => {
            if (!isVideoPlaying || !youtubePlayer || youtubePlayer.getPlayerState() !== YT.PlayerState.PLAYING) {
              console.log('Timer check - video not playing, pausing timer');
              pauseTimer();
              return;
            }
            updateTimer();
          }, 1000);
          console.log('Timer started - video is playing');
        }
      }
    };

    const pauseTimer = function() {
      // ALWAYS pause timer when video is not playing
      if (timerInterval) {
        clearInterval(timerInterval);
        timerInterval = null;
        console.log('Timer paused - video stopped playing');
        if (!isVideoPlaying) {
          updateStatusForPaused();
        }
      }
    };

    const updateStatusForReady = function() {
      statusText.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Loading video player...';
      document.getElementById('watchProgress').style.display = 'block';
    };

    const updateStatusForPlaying = function() {
      statusText.innerHTML = '<i class="fas fa-play me-2"></i>Video is playing - timer counting down...';
      document.getElementById('watchProgress').style.display = 'block';
    };

    const updateStatusForPaused = function() {
      if (timeLeft > 0) {
        const watchedSeconds = totalVideoWatchTime;
        const remainingSeconds = 30 - watchedSeconds;
        statusText.innerHTML = `<i class="fas fa-pause me-2"></i>Video paused - timer paused. You've watched ${watchedSeconds}/30 seconds. Click play to continue.`;
      }
    }

    function updateStatusForBuffering() {
      if (timeLeft > 0) {
        statusText.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Video is buffering - timer paused...';
      }
    }

    function updateStatusForEnded() {
      if (timeLeft > 0) {
        statusText.innerHTML = '<i class="fas fa-redo me-2"></i>Video ended - please replay to continue countdown.';
      }
    }

    function updateStatusForCued() {
      statusText.innerHTML = '<i class="fas fa-play-circle me-2"></i>Video loaded - click play to start countdown.';
    }
    
    function updateTimer() {
      // Only update if video is currently playing
      if (!isVideoPlaying) {
        console.log('Timer tick skipped - video not playing');
        return;
      }
      
      timerText.textContent = timeLeft;
      countdown.textContent = timeLeft;
      totalVideoWatchTime++;
      
      // Update watch progress
      const watchTimeDisplay = document.getElementById('watchTime');
      const watchProgressFill = document.getElementById('watchProgressFill');
      if (watchTimeDisplay && watchProgressFill) {
        watchTimeDisplay.textContent = totalVideoWatchTime;
        const progressPercent = (totalVideoWatchTime / 30) * 100;
        watchProgressFill.style.width = Math.min(progressPercent, 100) + '%';
      }
      
      // Update progress ring
      const progress = (30 - timeLeft) / 30;
      const offset = circumference - (progress * circumference);
      progressRing.style.strokeDashoffset = offset;
      
      if (timeLeft <= 0) {
        clearInterval(timerInterval);
        completeTimer();
        return;
      }
      
      // Update status messages based on time left (only when video is playing)
      if (timeLeft > 20) {
        statusText.innerHTML = '<i class="fas fa-play me-2"></i>Video is playing - timer counting down...';
      } else if (timeLeft > 10) {
        statusText.innerHTML = '<i class="fas fa-clock me-2"></i>Almost ready... Keep watching!';
      } else {
        statusText.innerHTML = '<i class="fas fa-hourglass-half me-2"></i>Just a few more seconds...';
        timerCircle.classList.add('pulse-animation');
      }
      
      timeLeft--;
    }
    
    function completeTimer() {
      // Count the click
      if (!hasClickBeenCounted) {
        countClick();
      }
      
      // Update UI
      timerText.textContent = 'âœ“';
      countdown.textContent = '0';
      
      statusMessage.className = 'status-message status-ready';
      statusText.innerHTML = '<i class="fas fa-check-circle me-2"></i>Excellent! You watched the video for 30 seconds. Choose your next action:';
      
      // Show action buttons
      loadingButtons.style.display = 'none';
      actionButtons.style.display = 'flex';
      
      // Add celebration effect
      showCelebration();
      
      // Log completion stats
      console.log(`Timer completed! Total video watch time: ${totalVideoWatchTime} seconds`);
      
      // Play success sound (if available)
      try {
        new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBDaJzvLKdyUFLnHN8N+USQoUW7Lp6apVFApGnuDyv2shBDaJzvLLdyQFLXHN8N+USQsUW7Lo6qpVFApGnuDyv2wiBDWJzvLKdyMFLnDM8N+VSQoUW7Lo6qtWFAlFnuDywGwiBDWIzfLKdyMFLnDN8N+VSgsUWrLn6qxVFAlFnuDywG0jBTWJzfHNeSMFNmjN8N+VTQoTWrTt6pJQEglBNHCNdCgGB1mo9ujheDUHGWaludjhezMFl5H1+uCaTQ==').play();
      } catch(e) {}
    }
    
    function countClick() {
      if (hasClickBeenCounted) return;
      
      hasClickBeenCounted = true;
      
      // Send click count to server
      fetch('/api/count-click/<%= sharedLink.share_code %>', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          timestamp: new Date().toISOString(),
          userAgent: navigator.userAgent,
          referrer: document.referrer
        })
      }).then(response => {
        if (response.ok) {
          console.log('Click counted successfully');
        }
      }).catch(error => {
        console.error('Error counting click:', error);
      });
    }
    
    function showCelebration() {
      const celebration = document.getElementById('celebration');
      const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#f9ca24', '#f0932b', '#eb4d4b', '#6c5ce7'];
      
      for (let i = 0; i < 50; i++) {
        setTimeout(() => {
          const confetti = document.createElement('div');
          confetti.style.position = 'absolute';
          confetti.style.width = '10px';
          confetti.style.height = '10px';
          confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
          confetti.style.left = Math.random() * 100 + '%';
          confetti.style.top = '-10px';
          confetti.style.borderRadius = '50%';
          confetti.style.animation = `fall ${Math.random() * 3 + 2}s linear forwards`;
          
          celebration.appendChild(confetti);
          
          setTimeout(() => {
            confetti.remove();
          }, 5000);
        }, i * 100);
      }
    }
    
    // Handle stay button
    document.getElementById('stayBtn').addEventListener('click', function() {
      window.location.href = '/';
    });
    
    // Load advertisement banners
    let allBanners = [];
    let bannerSlots = ['leftBanner1', 'leftBanner2', 'rightBanner1', 'mobileSlot'];
    let currentBannerIndex = { leftBanner1: 0, leftBanner2: 0, rightBanner1: 0, mobileSlot: 0, mobileBannerInline: 0 };
    let bannerRotationIntervals = {};
    let mobileInlineInterval = null;

    function loadAdBanners() {
      fetch(`/api/banners/<%= sharedLink.share_code %>`)
        .then(response => response.json())
        .then(banners => {
          allBanners = banners;
          
          if (banners.length === 0) {
            // Show "Advertise Here" message in all slots
            showAdvertisePlaceholder();
            showMobileInlinePlaceholder();
          } else {
            // Initialize banner display and rotation
            initializeBannerDisplay();
            initializeMobileInlineBanner();
            startBannerRotation();
            startMobileInlineRotation();
          }
        })
        .catch(error => {
          console.error('Error loading banners:', error);
          showAdvertisePlaceholder();
          showMobileInlinePlaceholder();
        });
    }

    function showAdvertisePlaceholder() {
      bannerSlots.forEach(slotId => {
        const slot = document.getElementById(slotId);
        const isMobile = slotId === 'mobileSlot';
        slot.innerHTML = `
          <a href="https://wa.me/250783987223?text=Hello%20admin%20of%20benixspace%20i%20want%20to%20advertise%20on%20your%20platform" 
             target="_blank" class="advertise-placeholder">
            <i class="fas fa-bullhorn ${isMobile ? 'fa-lg' : 'fa-2x'} mb-2"></i>
            <h6 style="font-size: ${isMobile ? '12px' : '16px'};">Advertise Here</h6>
            <p class="small mb-0" style="font-size: ${isMobile ? '10px' : '12px'};">Promote your business</p>
          </a>
        `;
      });
    }

    function initializeBannerDisplay() {
      const desktopSlots = ['leftBanner1', 'leftBanner2', 'rightBanner1'];
      
      desktopSlots.forEach((slotId, index) => {
        if (allBanners[index]) {
          // Show real ad if available
          displayBannerInSlot(slotId, allBanners[index]);
          currentBannerIndex[slotId] = index;
        } else {
          // Show "Advertise Here" placeholder if no ad available
          const slot = document.getElementById(slotId);
          slot.innerHTML = `
            <a href="https://wa.me/250783987223?text=Hello%20admin%20of%20benixspace%20i%20want%20to%20advertise%20on%20your%20platform" 
               target="_blank" class="advertise-placeholder">
              <i class="fas fa-bullhorn fa-2x mb-2"></i>
              <h6>Advertise Here</h6>
              <p class="small mb-0">Promote your business</p>
            </a>
          `;
        }
      });
      
      // Initialize mobile banner if we have banners
      if (allBanners.length > 0) {
        const mobileSlot = document.getElementById('mobileSlot');
        if (mobileSlot && allBanners[0]) {
          mobileSlot.innerHTML = `
            <button class="mobile-banner-close" onclick="hideMobileBanner()" title="Close">
              <i class="fas fa-times"></i>
            </button>
            <img src="${allBanners[0].image_url}" 
                 alt="${allBanners[0].title}" 
                 class="banner-image"
                 onclick="handleBannerClick(event, '${allBanners[0].id}', '${allBanners[0].target_url || allBanners[0].url}')"
                 data-banner-id="${allBanners[0].id}">
          `;
          currentBannerIndex.mobileSlot = 0;
          // Track impression for mobile banner
          trackBannerEvent(allBanners[0].id, 'impression');
        }
      }
    }

    function displayBannerInSlot(slotId, banner) {
      const slot = document.getElementById(slotId);
      slot.innerHTML = `
        <img src="${banner.image_url}" 
             alt="${banner.title}" 
             class="banner-image"
             onclick="handleBannerClick(event, '${banner.id}', '${banner.target_url || banner.url}')"
             data-banner-id="${banner.id}">
      `;
      
      // Track impression
      trackBannerEvent(banner.id, 'impression');
    }

    function startBannerRotation() {
      if (allBanners.length <= 1) return; // No need to rotate if we have 1 or fewer banners

      // Desktop banner rotation
      if (allBanners.length > 3) {
        const desktopSlots = ['leftBanner1', 'leftBanner2', 'rightBanner1'];
        const rotationTimes = {
          leftBanner1: 8000,  // 8 seconds
          leftBanner2: 12000, // 12 seconds  
          rightBanner1: 15000 // 15 seconds
        };

        desktopSlots.forEach(slotId => {
          if (rotationTimes[slotId]) {
            bannerRotationIntervals[slotId] = setInterval(() => {
              rotateBanner(slotId);
            }, rotationTimes[slotId]);
          }
        });
      }
      
      // Mobile banner rotation (if we have mobile banner)
      const mobileSlot = document.getElementById('mobileSlot');
      if (mobileSlot && allBanners.length > 1) {
        bannerRotationIntervals.mobileSlot = setInterval(() => {
          rotateBanner('mobileSlot');
        }, 10000); // 10 seconds for mobile
      }
    }

    function rotateBanner(slotId) {
      // Get next banner index
      currentBannerIndex[slotId] = (currentBannerIndex[slotId] + 1) % allBanners.length;
      
      // Display new banner with fade effect
      const slot = document.getElementById(slotId);
      slot.style.opacity = '0.5';
      
      setTimeout(() => {
        if (slotId === 'mobileSlot') {
          // Special handling for mobile slot
          const banner = allBanners[currentBannerIndex[slotId]];
          slot.innerHTML = `
            <button class="mobile-banner-close" onclick="hideMobileBanner()" title="Close">
              <i class="fas fa-times"></i>
            </button>
            <img src="${banner.image_url}" 
                 alt="${banner.title}" 
                 class="banner-image"
                 onclick="handleBannerClick('${banner.id}', '${banner.click_url}')"
                 data-banner-id="${banner.id}">
          `;
          // Track impression for mobile banner rotation
          trackBannerEvent(banner.id, 'impression');
        } else {
          displayBannerInSlot(slotId, allBanners[currentBannerIndex[slotId]]);
        }
        slot.style.opacity = '1';
      }, 250);
    }

    // Handle banner click
    function handleBannerClick(bannerId, clickUrl) {
      // Track click
      trackBannerEvent(bannerId, 'click');
      
      // Open URL
      window.open(clickUrl, '_blank');
    }

    // Track banner events (impressions and clicks)
    function trackBannerEvent(bannerId, eventType) {
      fetch('/api/banner-analytics', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          banner_id: bannerId,
          link_id: '<%= sharedLink.id %>',
          event_type: eventType
        })
      }).catch(error => {
        console.error('Error tracking banner event:', error);
      });
    }

    // Toggle banner containers
    function toggleBanners(side) {
      const container = document.getElementById(side + 'Banners');
      const icon = document.getElementById(side + 'ToggleIcon');
      
      if (container.classList.contains('hidden')) {
        container.classList.remove('hidden');
        if (side === 'left') {
          icon.className = 'fas fa-chevron-right';
        } else {
          icon.className = 'fas fa-chevron-left';
        }
      } else {
        container.classList.add('hidden');
        if (side === 'left') {
          icon.className = 'fas fa-chevron-left';
        } else {
          icon.className = 'fas fa-chevron-right';
        }
      }
    }

    // Hide mobile banner
    function hideMobileBanner() {
      const container = document.getElementById('mobileBanners');
      container.style.display = 'none';
    }

    // Mobile Inline Banner Functions
    function showMobileInlinePlaceholder() {
      const mobileSlot = document.getElementById('mobileBannerInline');
      if (mobileSlot) {
        mobileSlot.innerHTML = `
          <a href="https://wa.me/250783987223?text=Hello%20admin%20of%20benixspace%20i%20want%20to%20advertise%20on%20your%20platform" 
             target="_blank" class="advertise-placeholder">
            <i class="fas fa-bullhorn fa-lg mb-2"></i>
            <h6>Advertise Here</h6>
            <p class="small mb-0">Promote your business</p>
          </a>
        `;
      }
    }

    function initializeMobileInlineBanner() {
      if (allBanners.length > 0) {
        displayMobileInlineBanner(0);
      }
    }

    function displayMobileInlineBanner(bannerIndex) {
      const mobileSlot = document.getElementById('mobileBannerInline');
      if (!mobileSlot || !allBanners[bannerIndex]) return;

      const banner = allBanners[bannerIndex];
      mobileSlot.innerHTML = `
        <img src="${banner.image_url}" 
             alt="${banner.title}" 
             class="banner-image" 
             onclick="handleBannerClick('${banner.id}', '${banner.click_url}')"
             loading="lazy">
      `;
      
      currentBannerIndex.mobileBannerInline = bannerIndex;
      
      // Track impression for mobile inline banner
      trackBannerEvent(banner.id, 'impression');
    }

    function startMobileInlineRotation() {
      if (allBanners.length <= 1) return;

      mobileInlineInterval = setInterval(() => {
        const nextIndex = (currentBannerIndex.mobileBannerInline + 1) % allBanners.length;
        displayMobileInlineBanner(nextIndex);
      }, 6000); // Rotate every 6 seconds on mobile
    }

    function stopMobileInlineRotation() {
      if (mobileInlineInterval) {
        clearInterval(mobileInlineInterval);
        mobileInlineInterval = null;
      }
    }
    
    // Load banners when page loads
    document.addEventListener('DOMContentLoaded', function() {
      loadAdBanners();
    });

    // Cleanup intervals when page unloads
    window.addEventListener('beforeunload', function() {
      Object.values(bannerRotationIntervals).forEach(interval => {
        clearInterval(interval);
      });
      stopMobileInlineRotation();
    });
    
    // Initialize status message and timer
    const youtubeIframe = document.getElementById('youtubePlayer');
    if (youtubeIframe) {
      statusText.innerHTML = '<i class="fas fa-video me-2"></i>Loading video player... Please wait.';
      // Set initial display values
      timerText.textContent = timeLeft;
      countdown.textContent = timeLeft;
    } else {
      // For non-YouTube links, start timer immediately
      timerInterval = setInterval(updateTimer, 1000);
      updateTimer();
    }
    
    // Handle visibility change (tab switching) - strict video synchronization
    document.addEventListener('visibilitychange', function() {
      if (youtubeIframe && youtubePlayer && youtubePlayer.getPlayerState) {
        if (document.hidden) {
          // When tab becomes hidden, pause the video (which will auto-pause timer)
          if (isVideoPlaying) {
            console.log('Tab hidden - pausing video');
            youtubePlayer.pauseVideo();
          }
        } else {
          // When tab becomes visible, user must manually resume video
          if (!isVideoPlaying && timeLeft > 0) {
            statusText.innerHTML = '<i class="fas fa-eye me-2"></i>Welcome back! Click play to continue watching and resume the countdown.';
          }
        }
      }
    });
    
    // Add CSS for confetti animation and YouTube play button
    const style = document.createElement('style');
    style.textContent = `
      .youtube-play-button {
          width: 68px;
          height: 48px;
          position: relative;
          z-index: 1;
          transition: all 0.3s ease;
      }
      .youtube-thumbnail:hover .youtube-play-button {
          transform: scale(1.1);
      }
      @keyframes fall {
        0% {
          transform: translateY(-100vh) rotate(0deg);
          opacity: 1;
        }
        100% {
          transform: translateY(100vh) rotate(360deg);
          opacity: 0;
        }
      }
    `;
    document.head.appendChild(style);
    
    // Prevent page refresh/close during timer
    window.addEventListener('beforeunload', function(e) {
      if (!hasClickBeenCounted && timeLeft > 0) {
        e.preventDefault();
        e.returnValue = 'Your click is still being processed. Are you sure you want to leave?';
        return e.returnValue;
      }
    });

    // Handle banner clicks with proper URL redirection
    function handleBannerClick(event, bannerId, targetUrl) {
      // Track the click
      trackBannerEvent(bannerId, 'click');

      // If we have a valid target URL, redirect to it
      if (targetUrl && targetUrl !== 'undefined') {
        // Short delay to ensure tracking is sent
        setTimeout(() => {
          window.open(targetUrl, '_blank');
        }, 100);
      } else {
        console.error('No valid target URL for banner:', bannerId);
      }
    }
  </script>
</body>
</html>
